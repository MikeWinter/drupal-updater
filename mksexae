#!/usr/bin/env bash

function main() {
  local archive executable
  local -a files
  parseOptions "$@"

  local -r payload=$(mktemp)
  addExecutableToPayload
  createPayload
  createArchive
  rm "$payload"
  chmod u+x "$archive"
}

function parseOptions() {
  while getopts 'hf:s:' opt
  do
    case $opt in
      h) showUsage
         exit
         ;;
      f) archive="$OPTARG"
         if fileExists "$archive"
         then
           checkIsRegularFile "$archive"
           checkIsWritable "$archive"
         else
           local -r path=$(dirname "$archive")
           checkIsDirectory "$path"
           checkIsWritable "$path"
         fi
         ;;
      s) executable="$OPTARG"
         checkIsReadable "$executable"
         checkIsExecutable "$executable"
         ;;
     \?) exit 1
         ;;
    esac
  done
  shift $((OPTIND - 1))
  files=("$@")

  checkArchiveSpecified
  checkFileListSpecified
  checkArchiveIsNotInFileList
  removeScriptFromFileList
}

function showUsage() {
  cat <<EOF
Usage: $(basename $0) -f ARCHIVE [OPTION...] FILE...
       $(basename $0) -h
Create a self-extracting executable archive.

  -h          show this help list
  -f ARCHIVE  create archive file ARCHIVE
  -s SCRIPT   execute script file SCRIPT after extraction

Additional FILEs will be added to the archive payload.
EOF
}

function fileExists() {
  [[ -e "$1" ]]
}

function checkIsRegularFile() {
  if ! [[ -f "$1" ]]
  then
    >&2 echo Error - Not a regular file: $(realpath "$1")
    exit 1
  fi
}

function checkIsDirectory() {
  if ! [[ -d "$1" ]]
  then
    >&2 echo Error - Not a directory: $(realpath "$1")
    exit 1
  fi
}

function checkIsReadable() {
  if ! [[ -r "$1" ]]
  then
    >&2 echo Error - Not readable: $(realpath "$1")
    exit 1
  fi
}

function checkIsWritable() {
  if ! [[ -w "$1" ]]
  then
    >&2 echo Error - Not writable: $(realpath "$1")
    exit 1
  fi
}

function checkIsExecutable() {
  if ! [[ -x "$1" ]]
  then
    >&2 echo Error - Not executable: $(realpath "$1")
    exit 1
  fi
}

function checkArchiveSpecified() {
  if [[ -z "$archive" ]]
  then
    >&2 echo Error - No archive name specified. Use -h for usage information.
    exit 1
  fi
}

function checkFileListSpecified() {
  if ! [[ ${#files} -ge 1 ]]
  then
    >&2 echo Error - No files specified for archiving. Use -h for usage information.
    exit 1
  fi
}

function checkArchiveIsNotInFileList() {
  if arrayContains "$archive" files
  then
    echo Error - Cannot use a payload FILE as the ARCHIVE name: $(realpath "$archive")
    exit 1
  fi
}

function removeScriptFromFileList() {
  if [[ -n "$executable" ]]
  then
    for i in ${!files[@]}
    do
      if [[ "${files[$i]}" == "$executable" ]]
      then
        unset files[$i]
      fi
    done
  fi
}

function arrayContains() {
  local -r target=$1
  local -n array=$2
  for item in "${array[@]}"
  do
    if [[ "$item" == "$target" ]]
    then
      return 0
    fi
  done
  return 1
}

function addExecutableToPayload() {
  if [[ -n "$executable" ]]
  then
    files+=("$executable")
  fi
}

function createPayload() {
  tar -czf "$payload" "${files[@]}"
}

function createArchive() {
  cat - "$payload" > "$archive" <<EOF
#!/usr/bin/env bash

readonly payloadSize=$(wc -c "$payload" | awk '{print $1}')

tail -c \$payloadSize "\$0" | tar -xz

if [[ -n "$executable" ]]
then
  env "./$executable" "\$@"
fi
exit
EOF
}

main "$@"

